trigger:
- dev
- staging
- master

pool:
  name: self-hosted
  # Ensuring that only one job can run at a time.
  jobs:
    maxParallel: 1

variables:
  workingDirectory: '$(Build.SourcesDirectory)/terraform'
  scriptsDirectory: '$(workingDirectory)/scripts'
  name: environment
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}:
    value: 'dev'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/staging') }}:
    value: 'staging'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    value: 'prod'

stages:
- stage: 'Dev'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  variables:
  - group: dev-variable-group
  - group: storage_account_details
  - group: service_principal_info
  jobs:
  - deployment: 'DevDeployment'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform init -backend-config="resource_group_name=$(rg_name)" \
                              -backend-config="storage_account_name=$(sa_name)" \
                              -backend-config="container_name=$(container_backing_infrastructure)" \
                              -backend-config="key=dev.terraform.tfstate" \
                              -backend-config="client_id=$(clientid)" \
                              -backend-config="client_secret=$(secret)" \
                              -backend-config="tenant_id=$(tenant_id)" \
                              -backend-config="subscription_id=$(subscriptionId)"
            displayName: 'Terraform Init'
          - script: |
              sed -i 's/__SUBSCRIPTION_ID__/$(subscriptionId)/g' $(workingDirectory)/var.tf
              sed -i 's/__TENANT_ID__/$(tenant_id)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT__/$(environment)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT_NO_DASH__/$(environment_no_dash)/g' $(workingDirectory)/var.tf
              sed -i 's/__PROJECT_ID__/$(System.TeamProjectId)/g' $(workingDirectory)/var.tf
              sed -i 's/__ORG_URL__/$(System.CollectionUri)/g' $(workingDirectory)/var.tf
              sed -i 's/__PAT__/$(pat)/g' $(workingDirectory)/var.tf
              sed -i 's/__ORG_URL__/$(System.CollectionUri)/g' $(workingDirectory)/main.tf
              sed -i 's/__PAT__/$(pat)/g' $(workingDirectory)/main.tf
            displayName: 'Replace Variables for Dev'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform plan
            displayName: 'Terraform Plan'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform apply -auto-approve
            displayName: 'Terraform Apply'

          - task: Bash@3
            displayName: 'Update variable group using terraform outputs'
            inputs:
              targetType: filePath
              arguments: $(System.TeamFoundationCollectionUri) $(System.TeamProjectId) "_out_$(environment_no_dash)_bi_variable_group"
              workingDirectory: $(workingDirectory)
              filePath: $(scriptsDirectory)/update-variablegroup.sh
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)



- stage: 'Staging'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
  variables:
  - group: staging-variable-group
  - group: storage_account_details
  - group: service_principal_info
  jobs:
  - deployment: 'StagingDeployment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform init -backend-config="resource_group_name=$(rg_name)" \
                              -backend-config="storage_account_name=$(sa_name)" \
                              -backend-config="container_name=$(container_backing_infrastructure)" \
                              -backend-config="key=staging.terraform.tfstate" \
                              -backend-config="client_id=$(clientid)" \
                              -backend-config="client_secret=$(secret)" \
                              -backend-config="tenant_id=$(tenant_id)" \
                              -backend-config="subscription_id=$(subscriptionId)"
            displayName: 'Terraform Init'
          - script: |
              sed -i 's/__SUBSCRIPTION_ID__/$(subscriptionId)/g' $(workingDirectory)/var.tf
              sed -i 's/__TENANT_ID__/$(tenant_id)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT__/$(environment)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT_NO_DASH__/$(environment_no_dash)/g' $(workingDirectory)/var.tf
            displayName: 'Replace Variables for Staging'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform plan
            displayName: 'Terraform Plan'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform apply -auto-approve
            displayName: 'Terraform Apply'

          - task: Bash@3
            displayName: 'Update variable group using terraform outputs'
            inputs:
              targetType: filePath
              arguments: $(System.TeamFoundationCollectionUri) $(System.TeamProjectId) "_out_$(environment_no_dash)_bi_variable_group"
              workingDirectory: $(workingDirectory)
              filePath: $(scriptsDirectory)/update-variablegroup.sh
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)


- stage: 'Prod'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  variables:
  - group: prod-variable-group
  - group: storage_account_details
  - group: service_principal_info
  jobs:
  - deployment: 'ProdDeployment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform init -backend-config="resource_group_name=$(rg_name)" \
                              -backend-config="storage_account_name=$(sa_name)" \
                              -backend-config="container_name=$(container_backing_infrastructure)" \
                              -backend-config="key=prod.terraform.tfstate" \
                              -backend-config="client_id=$(clientid)" \
                              -backend-config="client_secret=$(secret)" \
                              -backend-config="tenant_id=$(tenant_id)" \
                              -backend-config="subscription_id=$(subscriptionId)"
            displayName: 'Terraform Init'
          - script: |
              sed -i 's/__SUBSCRIPTION_ID__/$(subscriptionId)/g' $(workingDirectory)/var.tf
              sed -i 's/__TENANT_ID__/$(tenant_id)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT__/$(environment)/g' $(workingDirectory)/var.tf
              sed -i 's/__ENVIRONMENT_NO_DASH__/$(environment_no_dash)/g' $(workingDirectory)/var.tf
              sed -i 's/__PROJECT_ID__/$(System.TeamProjectId)/g' $(workingDirectory)/var.tf
              sed -i 's/__ORG_URL__/$(devopsurl)/g' $(workingDirectory)/var.tf
              sed -i 's/__PAT__/$(pat)/g' $(workingDirectory)/var.tf
            displayName: 'Replace Variables for Prod'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform plan
            displayName: 'Terraform Plan'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devops-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(workingDirectory)
                terraform apply -auto-approve
            displayName: 'Terraform Apply'

          - task: Bash@3
            displayName: 'Update variable group using terraform outputs'
            inputs:
              targetType: filePath
              arguments: $(System.TeamFoundationCollectionUri) $(System.TeamProjectId) "_out_$(environment_no_dash)_bi_variable_group"
              workingDirectory: $(workingDirectory)
              filePath: $(scriptsDirectory)/update-variablegroup.sh
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)